rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Regra para documentos de usuários
    match /users/{userId} {
      // Usuários podem ler e escrever seus próprios dados
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Admins podem ler dados de todos os usuários
      allow read: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      
      // Admins podem atualizar usuários (para marcar como excluído)
      allow update: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      
      // Admins podem deletar usuários
      allow delete: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      
      // Regra para planos alimentares do usuário
      match /meal_plans/{planId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Regra para posts de notícias
    match /news_posts/{postId} {
      // Permite leitura para todos (público)
      allow read: if true;
      
      // Permite atualização apenas dos campos 'views', 'likes' e 'bookmarks' para usuários autenticados
      allow update: if request.auth != null && (
        // Permite incrementar views para qualquer usuário
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['views']) &&
         request.resource.data.views is number &&
         request.resource.data.views >= resource.data.views) ||
        
        // Permite curtir/descurtir para usuários autenticados
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']) &&
         request.resource.data.likes is list) ||
        
        // Permite salvar/dessalvar para usuários autenticados
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['bookmarks']) &&
         request.resource.data.bookmarks is list) ||
         
        // Permite atualização combinada de likes e bookmarks
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'bookmarks']) &&
         request.resource.data.likes is list &&
         request.resource.data.bookmarks is list)
      );
      
      // Permite criação, atualização completa e exclusão apenas para admins
      allow create, delete: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      
      // Permite atualização completa apenas para admins (exceto quando é só campos permitidos)
      allow update: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true &&
        !request.resource.data.diff(resource.data).affectedKeys().hasOnly(['views']) &&
        !request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']) &&
        !request.resource.data.diff(resource.data).affectedKeys().hasOnly(['bookmarks']) &&
        !request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'bookmarks']);
      
      // Regra para comentários dos posts
      match /comments/{commentId} {
        // Permite leitura para todos
        allow read: if true;
        
        // Permite criação para usuários autenticados
        allow create: if request.auth != null && 
          request.resource.data.userId == request.auth.uid;
        
        // Permite atualização e exclusão apenas para o autor do comentário ou admins
        allow update, delete: if request.auth != null && (
          resource.data.userId == request.auth.uid ||
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true
        );
        
        // Permite curtir comentários para usuários autenticados
        allow update: if request.auth != null &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']) &&
          request.resource.data.likes is list;
      }
    }
    

    
    // Regra para aceitação de termos de uso
    match /termsAcceptances/{acceptanceId} {
      // Permite criação apenas para usuários autenticados
      // O usuário só pode criar registros para si mesmo
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
      
      // Permite leitura apenas para admins ou para o próprio usuário
      allow read: if request.auth != null && (
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true ||
        resource.data.userId == request.auth.uid
      );
      
      // Não permite atualizações ou exclusões (registro permanente para auditoria)
      allow update, delete: if false;
    }
  }
}